import "__fs.gdn" as fs
import "__reflect.gdn" as reflect
import "__prelude.gdn" as prelude
import "./markdown.gdn"
import "./log.gdn" as log

// A list of all the files in `website_dir` that have a .md extension.
fun markdown_files(website_dir: Path): List<Path> {
  let dir_files = fs::list_directory(website_dir).or_throw()
  dir_files.filter(fun(p: Path) { p.extension() == Some("md") })
}

// Given a snippet of source code `src`, remove all the leading lines
// that are just comments.
fun drop_leading_comments(src: String): String {
  let lines = src.lines()

  let first_code_line = 0
  for (i, line) in lines.enumerate() {
    if line.starts_with("//") {
      continue
    }
    if line == "" {
      continue
    }

    first_code_line = i
    break
  }

  "\n".join(lines.slice(first_code_line, lines.len()))
}

fun write_fun_page(ns_name: String, ns: Namespace, fun_name: String, out_dir: Path, base_tmpl_src: String): Unit {
  let qualified_name = "::".join([ns_name, fun_name])

  match reflect::doc_comment(ns, fun_name) {
    Some(doc_comment) => {
      let heading = if ns_name == "__prelude.gdn" {
        "".join(["# `", fun_name, "`"])
      } else {
        "".join(["# `", qualified_name, "`"])
      }

      let src = reflect::source_for_fun(ns, fun_name)
      let page_src = render_doc_comment(heading, doc_comment, src)

      let dest_path = out_dir.join("fun:" ^ qualified_name ^ ".html")
      write_website_page(base_tmpl_src, page_src, dest_path, Some(fun_name))
    }
    None => {
      let parts = [
        "Tried to generate a page for ",
        qualified_name,
        " but it doesn't have a doc comment."]
      log::warn("".join(parts))
    }
  }
}

fun write_method_page(type_name: String, method_name: String, out_dir: Path, base_tmpl_src: String): Unit {
  let qualified_name = type_name ^ "::" ^ method_name

  match reflect::doc_comment_for_method(type_name, method_name) {
    Some(doc_comment) => {
      let heading = "# `" ^ qualified_name ^ "`"

      let page_src = render_doc_comment(heading, doc_comment, reflect::source_for_method(type_name, method_name))

      let dest_path = out_dir.join("method:" ^ qualified_name ^ ".html")
      write_website_page(base_tmpl_src, page_src, dest_path, Some(qualified_name))
    }
    None => {
      log::warn("Tried to generate a page for method " ^ qualified_name ^ " but it doesn't have a doc comment.")
    }
  }
}

// Render `doc_comment` as HTML.
fun render_doc_comment(heading: String, doc_comment: String, src: Option<String>): String {
  let src = match src {
    Some(src) => {
      "```title:\"Source Code\"\n" ^ drop_leading_comments(src) ^ "\n```"
    }
    None => ""
  }

  doc_comment = doc_comment.replace("\n\n```\n", "\n\n```title:Examples\n")

  let md_src = "".join([heading, "\n\n" , doc_comment, "\n\n", src])
  render_markdown(md_src)
}

fun render_type_doc_comment(heading: String, doc_comment: String, src: Option<String>, methods: List<String>, type_name: String): String {
  let src = match src {
    Some(src) => {
      "```title:\"Source Code\"\n" ^ drop_leading_comments(src) ^ "\n```"
    }
    None => ""
  }

  let methods_section = if methods.is_empty() {
    ""
  } else {
    let method_list = methods.map(fun(m: String) {
      "* [`" ^ m ^ "`](/method:" ^ type_name ^ "::" ^ m ^ ".html)"
    })
    "\n\n## Methods\n\n" ^ "\n".join(method_list)
  }

  let md_src = "".join([heading, "\n\n" , doc_comment, "\n\n", src, methods_section])
  render_markdown(md_src)
}

// Look up the doc comment for `type_name`, render it to HTML and
// write it to `out_dir`.
fun write_type_page(type_name: String, out_dir: Path, base_tmpl_src: String): Unit {
  match reflect::doc_comment_for_type(type_name) {
    Some(doc_comment) => {
      let heading = "".join(["# `", type_name, "` type"])
      let methods = reflect::methods_for_type(type_name)
      let page_src = render_type_doc_comment(heading, doc_comment, reflect::source_for_type(type_name), methods, type_name)

      let dest_path = out_dir.join("type:" ^ type_name ^ ".html")
      write_website_page(base_tmpl_src, page_src, dest_path, Some(type_name))
    }
    None => {}
  }
}

fun write_markdown_page(
  website_dir: Path,
  base_tmpl_string: String,
  md_path: Path,
  title: Option<String>
): Unit {
  let page_src_md = md_path.read().or_throw()
  let page_src = render_markdown(substitute_shorthand(website_dir, page_src_md))
  write_website_page(base_tmpl_string, page_src, md_path.set_extension("html"), title)
}

struct BlogPost {
  published: Bool,
  title: Option<String>,
  date: Option<String>,
  src: String,
  path: Path,
}

fun split_metadata(src: String): (Option<String>, String) {
  let metadata_start = "```metadata\n"
  let metadata_end = "\n```\n"

  if src.starts_with(metadata_start).not() {
    return (None, src)
  }

  match src.index_of(metadata_end) {
    Some(i) => {
      let before = src.substring(0, i)
      let after = src.substring(i + metadata_end.len(), src.len())
      (Some(before.strip_prefix(metadata_start)), after)
    }
    None => {
      (None, src)
    }
  }
}

test split_metadata {
  assert(split_metadata("```metadata\nfoo\n```\nstuff\n") == (Some("foo"), "stuff\n"))
}

fun blog_posts(website_dir: Path): List<BlogPost> {
  let posts: List<BlogPost> = []

  let blog_post_dir = website_dir.join("blog")
  for path in fs::list_directory(blog_post_dir).or_throw() {
    if path.extension() != Some("md") {
      continue
    }

    let published = False
    let title: Option<String> = None
    let date: Option<String> = None
    let src = match path.read() {
      Ok(src) => {
        let (metadata, src) = split_metadata(src)
        for line in metadata.or_value("").lines() {
          if line == "published: true" {
            published = True
          } else if line.starts_with("title: ") {
            title = Some(line.strip_prefix("title: "))
          } else if line.starts_with("date: ") {
            date = Some(line.strip_prefix("date: "))
          }
        }

        src
      }
      Err(e) => {
        log::warn("Could not read path: " ^ path.p ^ " error: " ^ e)
        continue
      }
    }

    posts = posts.append(BlogPost{ path: path, src: src, published: published, title: title, date: date })
  }

  posts
}

fun build_blog(website_dir: Path, base_tmpl_src: String): Unit {
  for post in blog_posts(website_dir) {
    if post.published.not() {
      continue
    }

    let src = post.src

    match post.date {
      Some(date) => {
        src = "*" ^ date ^ "*\n\n" ^ src
      }
      None => {}
    }

    match post.title {
      Some(title) => {
        src = "# " ^ title ^ "\n" ^ src
      }
      None => {}
    }

    let html = render_markdown(substitute_shorthand(website_dir, src))
    write_website_page(base_tmpl_src, html, post.path.set_extension("html"), post.title)
  }
}

// Build the entire garden website.
fun build_site(): Unit {
  let website_dir = source_dir_path().parent().or_throw().parent().or_throw().join("website")
  fs::set_working_directory(website_dir).or_throw()

  let out_dir = website_dir

  let base_tmpl_path = website_dir.join("template.html")
  let base_tmpl_src = base_tmpl_path.read().or_throw()

  build_blog(website_dir, base_tmpl_src)

  let seen_keyword_pages: List<String> = []
  let seen_operator_pages: List<String> = []

  for md_path in markdown_files(website_dir) {
    let file_name = match md_path.file_name() {
      Some(n) => n,
      None => continue,
    }

    let title: Option<String> = None
    match file_name.split_once(":") {
      Some((before, after)) => {
        if before == "keyword" {
          let keyword = after.strip_suffix(".md")
          seen_keyword_pages = seen_keyword_pages.append(keyword)
          title = Some(keyword)
        } else if before == "operator" {
          let keyword = after.strip_suffix(".md")
          seen_operator_pages = seen_operator_pages.append(keyword)
          title = Some(keyword)
        }
      }
      None => {}
    }

    write_markdown_page(website_dir, base_tmpl_src, md_path, title)
  }

  for keyword in reflect::keywords() {
    if seen_keyword_pages.contains(keyword).not() {
      log::warn("Expected a page documenting keyword: " ^ keyword)
    }
  }

  for operator in reflect::operators() {
    if seen_operator_pages.contains(operator).not() {
      log::warn("Expected a page documenting operator: " ^ operator)
    }
  }

  for type_name in reflect::prelude_types() {
    write_type_page(type_name, out_dir, base_tmpl_src)

    for method_name in reflect::methods_for_type(type_name) {
      write_method_page(type_name, method_name, out_dir, base_tmpl_src)
    }
  }

  let namespaces = [
    ("__prelude.gdn", prelude),
    ("__fs.gdn", fs),
    ("__reflect.gdn", reflect),
  ]

  for (ns_name, ns) in namespaces {
    for fun_name in reflect::namespace_functions(ns) {
      write_fun_page(ns_name, ns, fun_name, out_dir, base_tmpl_src)
    }
  }
}

// Convert `["a", "b", "c"]` to `"a, b and c"`.
fun join_with_commas_and(items: List<String>): String {
  let last_item = match items.last() {
    Some(item) => item,
    None => return "",
  }

  let but_last = items.slice(0, -1)
  if but_last.is_empty() {
    return last_item
  }

  " and ".join([", ".join(but_last), last_item ^ "."])
}

// Replace all __FOO strings in markdown `src` with runtime values.
fun substitute_shorthand(website_dir: Path, src: String): String {
  let keyword_links = reflect::keywords().map(fun(keyword: String) {
    "".join(["[`", keyword, "`](./keyword:", keyword, ".html)"])
  })

  let keyword_links = join_with_commas_and(keyword_links)

  let operator_links = reflect::operators().map(fun(operator: String) {
    "".join(["[`", operator, "`](./operator:", operator, ".html)"])
  })

  let operator_links = join_with_commas_and(operator_links)

  let type_links = reflect::prelude_types().map(fun(name: String) {
    "".join(["[`", name, "`](./type:", name, ".html)"])
  })

  let type_links = join_with_commas_and(type_links)

  let prelude_funs = reflect::namespace_functions(prelude).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__prelude.gdn::", name, ".html)"])
  })
  let prelude_funs = join_with_commas_and(prelude_funs)

  let fs_funs = reflect::namespace_functions(fs).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__fs.gdn::", name, ".html)"])
  })
  let fs_funs = join_with_commas_and(fs_funs)

  let reflect_funs = reflect::namespace_functions(reflect).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__reflect.gdn::", name, ".html)"])
  })
  let reflect_funs = join_with_commas_and(reflect_funs)

  let blog_links: List<String> = []
  for post in blog_posts(website_dir) {
    if post.published.not() {
      continue
    }

    let html_path = post.path.set_extension("html")
    let file_name = match html_path.file_name() {
      Some(fn) => fn
      None => continue
    }

    let link_text = match post.title {
      Some(title) => title
      None => file_name
    }

    let link_with_date = match post.date {
      Some(date) => link_text ^ " (" ^ date ^ ")"
      None => link_text
    }

    let link = "* [" ^ link_with_date ^ "](blog/" ^ file_name ^ ")"
    blog_links = blog_links.append(link)
  }

  let blog_links = "\n".join(blog_links)

  src
    .replace("__KEYWORDS", keyword_links)
    .replace("__OPERATORS", operator_links)
    .replace("__BUILTIN_TYPES", type_links)
    .replace("__PRELUDE_FUNS", prelude_funs)
    .replace("__FS_FUNS", fs_funs)
    .replace("__REFLECT_FUNS", reflect_funs)
    .replace("__BLOG_LINKS", blog_links)
}

// Wrap `page_src` in the base template and write to the file `dest_path`.
fun write_website_page(
  base_tmpl_src: String,
  page_src: String,
  dest_path: Path,
  title: Option<String>
): Unit {
  let title = match title {
    Some(s) => s ^ " - Garden"
    None => "Garden"
  }
  
  let base_tmpl_src = base_tmpl_src.replace("__TITLE", title)
  
  let (header, footer) = match base_tmpl_src.split_once("__MAIN_CONTENT") {
    Some(s) => s,
    None => ("", "")
  }

  let src = "".join([header.trim_right(), page_src, footer.trim_left()])
  fs::write_file(src, dest_path).or_throw()
}

{
  build_site()
}

fun source_dir_path(): Path {
  source_directory().or_throw()
}
