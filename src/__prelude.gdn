// Basic types.

// The boolean type. This type represents when something is true or
// false, such as predicates.
enum Bool {
  True,
  False,
}

external method not(this: Bool): Bool {
  match this {
    True => False,
    False => True,
  }
}

test not {
  assert(True.not() == False)
  assert(False.not() == True)
}

// The unit type. Use this when your function doesn't have any useful
// value to return, such as side-effecting functions.
enum Unit {
  Unit
}

// `Result` represents a value that succeeded, with `Ok(...)`, or
// failed, with `Err(...)`.
//
// For example, reading a file might return `Ok("contents of file")`
// or `Err("file did not exist")`.
enum Result<T, E> {
  Ok(T),
  Err(E),
}

// Write an arbitrary value to stdout, along with debugging metadata.
//
// Returns the input, so you can use `dbg` in larger expressions
// `foo(dbg(bar()))`.
//
// ```
// dbg([1, 2])
// ```
external fun dbg<T>(value: T): T {
  println(string_repr(value))
  value
}

// Raise an error.
//
// You can use this function for code that you haven't implemented
// yet.
external fun todo(): NoValue {
  error("Not yet implemented")
}

// If this value is `Ok`, unwrap it, otherwise error.
external method or_error<T, E>(this: Result<T, E>): T {
  match this {
    Ok(v) => v
    Err(e) => error(" ".join(["Called .unwrap() on an Err.", string_repr(e)]))
  }
}

test or_error {
  assert(Ok("foo").or_error() == "foo")
}

// The absence of a value. This is an enum with no variants, so it is
// impossible to create a value of type `NoValue`.
//
// This is useful when you have a function that never returns, such as
// `error()`.
//
// You can also encounter `NoValue` on empty containers. For example,
// `[]` has type `List<NoValue>` and `None` has type `Option<NoValue>`.
//
// This is sometimes called 'the bottom type'.
enum NoValue {}

// String methods.

// Does this string start with `s`?
external method starts_with(this: String, s: String): Bool {
  if s.len() > this.len() {
    return False
  }

  this.substring(0, s.len()) == s
}

test starts_with {
  assert("abc".starts_with("ab") == True)
  assert("abc".starts_with("") == True)

  assert("abc".starts_with("x") == False)
  assert("abc".starts_with("b") == False)
  assert("abc".starts_with("abcaa") == False)
}

// Does this string end with `s`?
external method ends_with(this: String, s: String): Bool {
  if s.len() > this.len() {
    return False
  }

  this.substring(this.len() - s.len(), this.len()) == s
}

test ends_with {
  assert("abc".ends_with("bc") == True)
  assert("abc".ends_with("") == True)

  assert("abc".ends_with("x") == False)
  assert("abc".ends_with("b") == False)
  assert("abc".ends_with("aabc") == False)
}

external method replace(this: String, before: String, after: String): String {
  let parts: List<String> = []

  let s = this
  while True {
    match s.index_of(before) {
      Some(i) => {
        parts = parts.append(s.substring(0, i))
        parts = parts.append(after)
        s = s.substring(i + before.len(), s.len())
      }
      None => {
        parts = parts.append(s)
        break
      }
    }
  }

  "".join(parts)
}

test string_replace {
  assert("ab".replace("cd", "x") == "ab")
  assert("abcd cd".replace("cd", "x") == "abx x")
}

// Split this string on the first occurrence of `needle`, and return
// the text before and after `needle`.
//
// ```
// "abcd".split_once("b") // Some(["a", "cd"])
// ```
external method split_once(this: String, needle: String): Option<(String, String)> {
  match this.index_of(needle) {
    None => None
    Some(i) => {
      Some((
        this.substring(0, i),
        this.substring(i + needle.len(), this.len()),
      ))
    }
  }
}

test split_once {
  assert("abc".split_once("x") == None)

  assert("abc".split_once("b") == Some(("a", "c")))
  assert("abc".split_once("c") == Some(("ab", "")))
  assert("abcbe".split_once("b") == Some(("a", "cbe")))
}

// Join `items` (a list of strings) with this string as a separator.
//
// ```
// ":".join(["a", "b", "c"]) // "a:b:c"
// ```
external method join(this: String, items: List<String>): String {
  let first = match items.first() {
    Some(item) => item
    None => return ""
  }

  if items.len() == 1 {
    return first
  }

  let res = first
  for item in items.slice(1, items.len()) {
    res = (res ^ this) ^ item
  }

  res
}

test join {
  assert(" ".join(["x"]) == "x")

  assert(" ".join(["x", "y"]) == "x y")
}

// Does this string contain `substring`?
external method contains(this: String, substring: String): Bool {
  if substring.len() > this.len() {
    return False
  }

  // TODO: better parse error if this last parenthesis is missing.
  // dbg(string_length(haystack) - string_length(substring))

  let i = 0
  while i <= (this.len() - substring.len()) {
    let section = this.substring(i, i + substring.len())
    if section == substring {
      return True
    }

    i += 1
  }

  False
}

external method trim_left(this: String): String {
  let i = 0
  while i < this.len() {
    let char = this.substring(i, i + 1)
    if char != " " {
      break
    }

    i += 1
  }

  this.substring(i, this.len())
}

test trim_left {
  assert("a".trim_left() == "a")
  assert("a b".trim_left() == "a b")
  assert("  a".trim_left() == "a")
  assert("a ".trim_left() == "a ")
}

external method trim_right(this: String, ): String {
  let i = this.len() - 1
  while i >= 0 {
    let char = this.substring(i, i + 1)
    if char != " " {
      break
    }

    i -= 1
  }

  this.substring(0, i + 1)
}

test trim_right {
  assert("a".trim_right() == "a")
  assert("a b".trim_right() == "a b")
  assert(" a".trim_right() == " a")
  assert("a  ".trim_right() == "a")
}

// Remove whitespace from both the start and end of this string.
external method trim(this: String, ): String {
  this.trim_left().trim_right()
}

test trim {
  assert("a".trim() == "a")
  assert("a b".trim() == "a b")
  assert(" a".trim() == "a")
  assert("a  ".trim() == "a")
}


// Returns this string without the suffix specified. If this string
// does not end with the suffix, return the string unchanged.
//
// ```
// "foo".strip_suffix("o") // "fo"
// "bar".strip_suffix("o") // "bar"
// ```
external method strip_suffix(this: String, suffix: String): String {
  if this.ends_with(suffix) {
    return this.substring(0, this.len() - suffix.len())
  }

  this
}

test strip_suffix {
  assert("abcdef".strip_suffix("ef") == "abcd")
  assert("abcdef".strip_suffix("xyz") == "abcdef")
}

// Returns this string without the prefix specified. If this string
// does not start with the prefix, return the string unchanged.
//
// ```
// "foo".strip_prefix("f") // "oo"
// "bar".strip_prefix("f") // "bar"
// "ffoo".strip_prefix("f") // "foo"
// ```
external method strip_prefix(this: String, prefix: String): String {
  if this.starts_with(prefix) {
    // return this.substring(prefix.len(), this.len(), 1)
    return this.substring(prefix.len(), this.len())
  }

  this
}

test strip_prefix {
  assert("abcdef".strip_prefix("ab") == "cdef")
  assert("abcdef".strip_prefix("xyz") == "abcdef")
}

// Split this string on occurrences of `needle`.
//
// ```
// "a,b".split(",") // ["a", "b"]
// "ab".split(",") // ["ab"]
// "a,,b,".split(",") // ["a", "", "b", ""]
// ```
external method split(this: String, needle: String): List<String> {
  let s = this

  let parts: List<String> = []
  while True {
    match s.index_of(needle) {
      Some(i) => {
        parts = parts.append(s.substring(0, i))
        s = s.substring(i + needle.len(), s.len())
      }
      None => {
        parts = parts.append(s)
        break
      }
    }

  }

  parts
}

test split {
  assert("ab".split(",") == ["ab"])
  assert("a,b".split(",") == ["a", "b"])
  assert("a,,b".split(",") == ["a", "", "b"])
  assert("a,b,".split(",") == ["a", "b", ""])
}

external method chars(this: String): List<String> {
  let cs: List<String> = []

  let i = 0
  while i < this.len() {
    cs = cs.append(this.substring(i, i + 1))
    i += 1
  }

  cs
}

test string_chars {
  assert("abc".chars() == ["a", "b", "c"])
}

// A filesystem path.
struct Path {
  p: String,
}

// Get the parent for this path. For directories, this is the parent
// directory. For files, this is the containing directory.
//
// This always returns a `Path`, so the root directory (i.e. `/`) is
// returned as-is.
//
// ```
// Path{ p: "/foo/bar.txt" }.parent() // Path{ p: "/foo" }
// Path{ p: "/foo/bar/" }.parent() // Path{ p: "/foo" }
// Path{ p: "/" }.parent() // Path{ p: "/" }
// ```
external method parent(this: Path): Path {
  let p = this.p.strip_suffix("/")
  if p == "" {
    return Path{ p: "/" }
  }

  let parts = p.split("/").slice(0, -1)
  Path{ p: "/".join(parts) }
}

test path_parent {
  assert(Path{ p: "/foo/bar.txt" }.parent() == Path{ p: "/foo" })
  assert(Path{ p: "/foo/bar/" }.parent() == Path{ p: "/foo" })
  assert(Path{ p: "/" }.parent() == Path{ p: "/" })
}

// Append `component` to this path.
external method join(this: Path, component: String): Path {
  let p = if this.p.ends_with("/") {
    this.p ^ component
  } else {
    (this.p ^ "/") ^ component
  }

  Path{ p: p }
}

test path_join {
  let directory = Path{ p: "/foo/bar" }
  assert(directory.join("baz").p == "/foo/bar/baz")

  let relative_directory = Path{ p: "foo/bar" }
  assert(relative_directory.join("baz").p == "foo/bar/baz")

  let root = Path{ p: "/" }
  assert(root.join("baz").p == "/baz")
}

// The extension of this path, if this path is a file whose name
// includes a ".".
external method extension(this: Path): Option<String> {
  let name = match this.file_name() {
    Some(name) => name
    None => return None
  }

  name.split(".").last()
}

// The last component of this path.
//
// ```
// Path{ p: "/foo/bar.txt" }.file_name() // Some("bar.txt")
// Path{ p: "/foo/" }.file_name() // Some("foo")
// Path{ p: "/" }.file_name() // None
// ```
external method file_name(this: Path): Option<String> {
  if this.p == "/" {
    return None
  }

  this.p.strip_suffix("/").split("/").last()
}

test path_file_name {
  assert(Path{ p: "/foo/bar.txt"}.file_name() == Some("bar.txt"))
  assert(Path{ p: "/foo/"}.file_name() == Some("foo"))
  assert(Path{ p: "/"}.file_name() == None)
}

// Set the extension of the filename to `new_ext`.
//
// ```
// Path{ p: "/foo/bar"}.set_extension("log") // Path{ p: "/foo/bar.log"}
// Path{ p: "/foo/bar.txt"}.set_extension("log") // Path{ p: "/foo/bar.log"}
// Path{ p: "/foo/bar.txt.gz"}.set_extension("log") // Path{ p: "/foo/bar.log"}
// ```
external method set_extension(this: Path, new_ext: String): Path {
  let new_ext = "." ^ new_ext
  match this.file_name() {
    Some(file_name) => {
      let c = this.parent()
      match file_name.split_once(".") {
        Some((base_file_name, _ext)) => c.join(base_file_name ^ new_ext)
        None => c.join(file_name ^ new_ext)
      }
    },
    None => this,
  }
}

test path_set_extension {
  assert(Path{ p: "/foo/bar"}.set_extension("log") == Path{ p: "/foo/bar.log"} )
  assert(Path{ p: "/foo/bar.txt"}.set_extension("log") == Path{ p: "/foo/bar.log"} )
  assert(Path{ p: "/foo/bar.txt.gz"}.set_extension("log") == Path{ p: "/foo/bar.log"} )
}

// Return a list from `i` (inclusive) to `j` (exclusive).
//
// ```
// range(1, 5) // [1, 2, 3, 4]
// ```
external fun range(i: Int, j: Int): List<Int> {
  let items: List<Int> = []
  while i < j {
    items = items.append(i)
    i += 1
  }
  items
}

test range {
  assert(range(1, 5) == [1, 2, 3, 4])
  assert(range(10, 10) == [])
  assert(range(11, 10) == [])
}

// An immutable sequence of values. For example, `[1, 2, 3]` is a
// `List<Int>`.
struct List<T> {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// Return a new list with the value added to the end.
//
// ```
// [10].append(11) // [10, 11]
// ```
external method append<T>(this: List<T>, value: T): List<T> {
  __BUILTIN_IMPLEMENTATION
}

// Does this list contain `item`?
//
// ```
// [10, 11, 12].contains(12) // True
// ```
external method contains<T>(this: List<T>, item: T): Bool {
  __BUILTIN_IMPLEMENTATION
}

test list_contains {
  assert([].contains(10) == False)
  assert([10, 11].contains(10) == True)
  assert([12, 11, 10, 10].contains(10) == True)
}

// Get the item in the list at the index specified.
//
// Returns `None` if the index is less than 0 or if the index is greater
// than `length - 1`.
//
// ```
// [4, 5, 6].get(1) // Some(5)
// [4, 5, 6].get(3) // None
// ```
external method get<T>(this: List<T>, index: Int): Option<T> {
  __BUILTIN_IMPLEMENTATION
}

test list_get {
  assert([4, 5, 6].get(1) == Some(5))
  assert([4, 5, 6].get(3) == None)

  assert([].get(0) == None)
  assert([].get(-1) == None)
}

// Return the length of the list.
//
// ```
// [10, 11, 12].len() // 3
// ```
external method len<T>(this: List<T>): Int {
  __BUILTIN_IMPLEMENTATION
}

// Get the first item in this list, if the list is not empty.
external method first<T>(this: List<T>): Option<T> {
  this.get(0)
}

test first {
  assert([].first() == None)
  assert([123].first() == Some(123))
}

// Get the last item in this list, if the list is not empty.
external method last<T>(this: List<T>): Option<T> {
  this.get(this.len() - 1)
}

test last {
  assert([].last() == None)
  assert([123].last() == Some(123))
}

// Return a copy of this list with the items where `f(item)` returns
// True.
external method filter<T>(this: List<T>, f: Fun<(T), Bool>): List<T> {
  let result: List<T> = []

  for item in this {
    if f(item) {
      result = result.append(item)
    }
  }

  result
}

test filter {
  assert([1, 2].filter(fun(_) { True }) == [1, 2])
}

// Is this list empty?
external method is_empty<T>(this: List<T>): Bool {
  this.len() == 0
}

test is_empty {
  assert([].is_empty())
  assert([1].is_empty().not())
}

// Is this list non-empty?
external method is_non_empty<T>(this: List<T>): Bool {
  this.len() != 0
}

test is_non_empty {
  assert([].is_non_empty().not())
  assert([1].is_non_empty())
}

// Call `f` on every item in this list, and return a list of the
// results.
//
// ```
// [1, 2].map(fun(x) { x + 1 }) // [2, 3]
// ```
external method map<T, U>(this: List<T>, f: Fun<(T), U>): List<U> {
  let items: List<U> = []
  for item in this {
    items = items.append(f(item))
  }

  items
}

test list_map {
  let incremented = [1, 2, 3].map(fun(x: Int) { x + 1 })
  assert(incremented == [2, 3, 4])
}

// Return a new list consisting of the items from index i (inclusive)
// to index j (exclusive). If `j` is negative, count backwards from
// the end.
//
// ```
// [10, 11, 12].slice(0, 2) // [10, 11]
// [10, 11, 12].slice(1, -1) // [11]
// ```
external method slice<T>(this: List<T>, i: Int, j: Int): List<T> {
  if (j < 0) {
    j = this.len() + j
  }

  let items: List<T> = []

  let index = 0
  for item in this {
    if (index >= i) && (index < j) {
      items = items.append(item)
    }

    index += 1
  }

  items
}

test list_slice {
  assert([10, 11, 12].slice(0, 1) == [10])
  assert([10, 11, 12].slice(1, 2) == [11])
  assert([10, 11, 12].slice(0, 2) == [10, 11])

  assert([10, 11, 12].slice(0, -1) == [10, 11])
}

// Return a new list consisting of the items themselves, plus the
// index of the position of each value.
//
// ```
// ["a", "b"].enumerate() // [(0, "a"), (1, "b")]
// ```
external method enumerate<T>(this: List<T>): List<(Int, T)> {
  let items: List<(Int, T)> = []

  let i = 0
  for item in this {
    let t = (i, item)
    items = items.append(t)
    i += 1
  }

  items
}

test list_enumerate {
  assert(["a", "b"].enumerate() == [(0, "a"), (1, "b")])
}

// The option type. Use this when you might have a value, but might
// not.
enum Option<T> {
  Some(T),
  None,
}

/// Return True if this value is `Some`.
external method is_some<T>(this: Option<T>): Bool {
  match this {
    Some(_) => True,
    None => False,
  }
}

/// Return True if this value is `None`.
external method is_none<T>(this: Option<T>): Bool {
  match this {
    Some(_) => False,
    None => True,
  }
}

// If this value is `Some(value)`, unwrap it, otherwise throw an exception.
external method or_exception<T>(this: Option<T>): T {
  match this {
    Some(v) => v,
    None => error("Called or_exception on a `None` value.")
  }
}

test option_or_exception {
  assert(Some(123).or_exception() == 123)
}

// If this value is `Some(x)`, return `x`, otherwise return `value`.
//
// ```
// Some(1).or_value(5) // 1
// None.or_value(5) // 5
// ```
external method or_value<T>(this: Option<T>, value: T): T {
  match this {
    Some(v) => v,
    None => value
  }
}

test option_or_value {
  assert(Some(1).or_value(5) == 1)

  let n: Option<Int> = None
  assert(n.or_value(5) == 5)
}

// A Unicode string, such as `"hello world"`.
struct String {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// A 64-bit integer, such as `1234`.
struct Int {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// Stop the program immediately, and report the error message given.
//
// ```
// error("Computer is melting!")
// ```
external fun error(message: String): NoValue {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout.
//
// ```
// print("hello world\n")
// ```
external fun print(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout, with a newline appended.
//
// ```
// println("hello world")
// ```
external fun println(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Execute the given string as a shell command, and return stdout
// concatenated with stderr.
//
// ```
// shell("ls", ["-l", "/"])
// ```
external fun shell(command: String, args: List<String>): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

// Return the pretty-printed string representation of this value.
//
// ```
// string_repr(123) // "123"
// ```
external fun string_repr<T>(value: T): String {
  __BUILTIN_IMPLEMENTATION
}

// Return the path of the directory that contains the current source
// file. Returns None when run directly in a CLI or JSON session.
//
// ```
// source_directory() // Some(Path{ p: "/home/yourname/awesome_garden_project" })
// ```
external fun source_directory(): Option<Path> {
  __BUILTIN_IMPLEMENTATION
}

// Return the number of characters (codepoints) in the string.
//
// ```
// "abc".len() // 3
// ```
external method len(this: String): Int {
  __BUILTIN_IMPLEMENTATION
}

test string_len {
  assert("abc".len() == 3)
  assert("☃".len() == 1)
}

// Split this string into a list of lines.
//
// ```
// "a\nb".lines() // ["a", "b"]
// ```
external method lines(this: String): List<String> {
  __BUILTIN_IMPLEMENTATION
}

test string_lines {
  assert("".lines() == [])
  assert("a".lines() == ["a"])
  assert("a\nb".lines() == ["a", "b"])
  assert("a\nb\n".lines() == ["a", "b"])
}

// Return the substring of the string between the indexes
// specified. Indexes are specified in character offsets, not bytes.
//
// ```
// "abcdef".substring(1, 3) // "bc"
// "abc".substring(1, 99) // "bc"
// ```
external method substring(this: String, from_index: Int, to_index: Int): String {
  __BUILTIN_IMPLEMENTATION
}

test string_substring {
  // Check we handle large end offsets gracefully
  assert("abc".substring(1, 99) == "bc")
}

// Find the first index of `needle` in `this`. Positions are in
// character offsets, not bytes.
//
// ```
// "abc".index_of("c") // Some(2)
// ```
external method index_of(this: String, needle: String): Option<Int> {
  __BUILTIN_IMPLEMENTATION
}

test string_index_of {
  assert("abc".index_of("x") == None)

  assert("abc".index_of("a") == Some(0))
  assert("abca".index_of("a") == Some(0))

  assert("abc".index_of("c") == Some(2))

  assert("☃c".index_of("c") == Some(1))
}

// Return True if this path exists.
//
// ```
// Path{ p: "/" }.exists() // True
// Path{ p: "/no_such_file" }.exists() // False
// ```
//
// Note that a path may exist without the current user having
// permission to read it.
external method exists(this: Path): Bool {
  __BUILTIN_IMPLEMENTATION
}

test path_exists {
  assert(Path{ p: "/" }.exists() == True)
  assert(Path{ p: "/no_such_dir_for_garden_test" }.exists() == False)
}

// Read the contents of `path` as a string.
//
// ```
// Path{ p: "/tmp/foo.txt" }.read()
// ```
external method read(this: Path): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

test path_read {
  assert(Path{ p: "/dev/null" }.read() == Ok(""))
}

// Get the arguments passed when this program was run.
//
// For example, if the shell command was `garden run my_program.gdn
// --foo`, then this function will return `["--foo"]`.
external fun shell_arguments(): List<String> {
  __BUILTIN_IMPLEMENTATION
}

// A collection of functions and types from importing a file.
struct Namespace {
  __BUILTIN_IMPLEMENTATION: NoValue,
}
