external fun (this: List<T>) good<T>() {}

// We shouldn't allow this, because it's unclear whether `[].bad()`
// dispatches to this method or not.
external fun (this: List<Int>) bad() {}

external fun (this: Result<T, T>) also_bad<T>() {}

external fun (this: T) very_bad<T>() {}

// args: check
// expected exit status: 1
// expected stdout:
// Error: Methods must be generic in all their type parameters, for example `List<T>` rather than `List<Int>`.
// ---| src/test_files/check/type_error_method_specialised_type.gdn:5:26
// 3  | // We shouldn't allow this, because it's unclear whether `[].bad()`
// 4  | // dispatches to this method or not.
// 5  | external fun (this: List<Int>) bad() {}
// 6  |                          ^^^
// 7  | external fun (this: Result<T, T>) also_bad<T>() {}
// 
// Error: Methods cannot repeat generic type parameters.
// ---| src/test_files/check/type_error_method_specialised_type.gdn:7:31
// 5  | external fun (this: List<Int>) bad() {}
// 6  | 
// 7  | external fun (this: Result<T, T>) also_bad<T>() {}
// 8  |                               ^
// 9  | external fun (this: T) very_bad<T>() {}
// 
// Error: Methods must be defined on specific types, such as `List`, not generic types.
// ---| src/test_files/check/type_error_method_specialised_type.gdn:9:21
// 7  | external fun (this: Result<T, T>) also_bad<T>() {}
// 8  | 
// 9  | external fun (this: T) very_bad<T>() {}
// 10 |                     ^
// 11 | // args: check

