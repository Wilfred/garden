// A Unicode string, such as "hello world".
struct String {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// A 64-bit integer, such as 1234.
struct Int {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// A sequence of values of type T, such as [1, 2, 3].
struct List<T> {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// Stop the program immediately, and report the error message given.
//
// ```
// error("Computer is melting!")
// ```
external fun error(message: String): NoValue {
  __BUILTIN_IMPLEMENTATION
}

// List the contents of the specified directory.
//
// ```
// list_directory(Path{ p: "/" })
// ```
external fun list_directory(path: Path): Result<List<Path>, String> {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout.
//
// ```
// print("hello world\n")
// ```
external fun print(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout, with a newline appended.
//
// ```
// println("hello world")
// ```
external fun println(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Execute the given string as a shell command, and return stdout
// concatenated with stderr.
//
// ```
// shell("ls", ["-l", "/"])
// ```
external fun shell(command: String, args: List<String>): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

// Pretty print a value.
//
// ```
// string_repr(123) // "123"
// ```
external fun string_repr<T>(value: T): String {
  __BUILTIN_IMPLEMENTATION
}

// Write `content` to file `path`.
//
// If `path` already exists, its content is replaced with `content`.
//
// ```
// write_file("hello world", "/tmp/foo.txt")
// ```
external fun write_file(content: String, path: String): Result<Unit, String> {
  __BUILTIN_IMPLEMENTATION
}

// Return the path of the current working directory.
//
// ```
// working_directory() // Path{ p: "/home/yourname/awesome_garden_project" }
// ```
external fun working_directory(): Path {
  __BUILTIN_IMPLEMENTATION
}

// Return the path of the directory that contains the current source
// file. Returns None when run directly in a CLI or JSON session.
//
// ```
// source_directory() // Some(Path{ p: "/home/yourname/awesome_garden_project" })
// ```
external fun source_directory(): Option<Path> {
  __BUILTIN_IMPLEMENTATION
}

// Return a new list with the value added to the end.
//
// ```
// [10].append(11) // [10, 11]
// ```
external fun (this: List<T>) append<T>(value: T): List<T> {
  __BUILTIN_IMPLEMENTATION
}

// Does this list contain `item`?
//
// ```
// [10, 11, 12].contains(12) // True
// ```
external fun (this: List<T>) contains<T>(item: T): Bool {
  __BUILTIN_IMPLEMENTATION
}

test list_contains {
  assert([].contains(10) == False)
  assert([10, 11].contains(10) == True)
  assert([12, 11, 10, 10].contains(10) == True)
}

// Get the item in the list at the index specified.
//
// Returns `None` if the index is less than 0 or if the index is greater
// than `length - 1`.
//
// ```
// [4, 5, 6].get(1) // Some(5)
// [4, 5, 6].get(3) // None
// ```
external fun (this: List<T>) get<T>(index: Int): Option<T> {
  __BUILTIN_IMPLEMENTATION
}

test list_get {
  assert([4, 5, 6].get(1) == Some(5))
  assert([4, 5, 6].get(3) == None)

  assert([].get(0) == None)
  assert([].get(-1) == None)
}

// Return the length of the list.
//
// ```
// [10, 11, 12].len() // 3
// ```
external fun (this: List<T>) len<T>(): Int {
  __BUILTIN_IMPLEMENTATION
}

// Return the number of characters (codepoints) in the string.
//
// ```
// "abc".len() // 3
// ```
external fun (this: String) len(): Int {
  __BUILTIN_IMPLEMENTATION
}

test string_len {
  assert("abc".len() == 3)
  assert("☃".len() == 1)
}

// Split this string into a list of lines.
//
// ```
// "a\nb".lines() // ["a", "b"]
// ```
external fun (this: String) lines(): List<String> {
  __BUILTIN_IMPLEMENTATION
}

test string_lines {
  assert("".lines() == [])
  assert("a".lines() == ["a"])
  assert("a\nb".lines() == ["a", "b"])
  assert("a\nb\n".lines() == ["a", "b"])
}

// Return the substring of the string between the indexes
// specified. Indexes are specified in character offsets, not bytes.
//
// ```
// "abcdef".substring(1, 3) // "bc"
// "abc".substring(1, 99) // "bc"
// ```
external fun (this: String) substring(from_index: Int, to_index: Int): String {
  __BUILTIN_IMPLEMENTATION
}

test string_substring {
  // Check we handle large end offsets gracefully
  assert("abc".substring(1, 99) == "bc")
}

// Find the first index of `needle` in `this`. Positions are in
// character offsets, not bytes.
//
// ```
// "abc".index_of("c") // Some(2)
// ```
external fun (this: String) index_of(needle: String): Option<Int> {
  __BUILTIN_IMPLEMENTATION
}

test string_index_of {
  assert("abc".index_of("x") == None)

  assert("abc".index_of("a") == Some(0))
  assert("abca".index_of("a") == Some(0))

  assert("abc".index_of("c") == Some(2))

  assert("☃c".index_of("c") == Some(1))
}

// Return True if this path exists.
//
// ```
// Path{ p: "/" }.exists() // True
// Path{ p: "/no_such_file" }.exists() // False
// ```
//
// Note that a path may exist without the current user having
// permission to read it.
external fun (this: Path) exists(): Bool {
  __BUILTIN_IMPLEMENTATION
}

test path_exists {
  assert(Path{ p: "/" }.exists() == True)
  assert(Path{ p: "/no_such_dir_for_garden_test" }.exists() == False)
}

// Read the contents of `path` as a string.
//
// ```
// Path{ p: "/tmp/foo.txt" }.read()
// ```
external fun (this: Path) read(): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

test path_read {
  assert(Path{ p: "/dev/null" }.read() == Ok(""))
}

// Check the syntax of `src`.
external fun check_snippet(src: String): Result<Unit, List<String>> {
  __BUILTIN_IMPLEMENTATION
}

test check_snippet_good {
  match check_snippet("fun foo() {}") {
    Ok(_) => {}
    Err(_) => {
      assert(False)
    }
  }
}

test check_snippet_bad_syntax {
  match check_snippet("fun foo(") {
    Ok(_) => {
      assert(False)
    }
    Err(_) => {}
  }
}

test check_snippet_bad_name {
  match check_snippet("fun foo() { bar() }") {
    Ok(_) => {
      assert(False)
    }
    Err(_) => {}
  }
}

// Split `src` into individual lexed tokens, along with their offsets
// in the original string.
external fun lex(src: String): List<(Int, String)> {
  __BUILTIN_IMPLEMENTATION
}

test lex {
  // Basic case.
  assert(lex("a 123 \"b c d\"") == [(0, "a"), (2, "123"), (6, "\"b c d\"")])

  // We should include preceding comments on tokens.
  assert(lex("a // b\n c") == [(0, "a"), (2, "// b\n"), (8, "c")])

  // We should include comments that have no token afterwards.
  assert(lex("a // b\n") == [(0, "a"), (2, "// b\n")])

  // Comments should not require a newline at EOF.
  assert(lex("a // b") == [(0, "a"), (2, "// b")])
}

external fun type_doc_comment(type_name: String): Option<String> {
  __BUILTIN_IMPLEMENTATION
}

test type_doc_comment {
  match type_doc_comment("Unit") {
    Some(_) => {}
    None => { assert(False) }
  }

  match type_doc_comment("NoSuchTypeExists") {
    Some(_) => { assert(False) }
    None => {}
  }
}

// A list of all the built-in type names, `String`, `Option` and
// so on. The list is sorted alphabetically.
external fun built_in_types(): List<String> {
  __BUILTIN_IMPLEMENTATION
}

test built_in_types {
  assert(built_in_types().contains("Unit"))

  assert(built_in_types().first() == Some("Bool"))
}
