// Stop the program immediately, and report the error message given.
//
// ```
// error("Computer is melting!");
// ```
fun error(_: String): NoValue {
    __BUILTIN_IMPLEMENTATION;
}

// List the contents of the specified directory.
//
// ```
// list_directory("/");
// ```
fun list_directory(_: String): List {
    __BUILTIN_IMPLEMENTATION;

}

// Return True if this path exists.
//
// ```
// path_exists("/"); // True
// path_exists("/no_such_dir"); // False
// ```
// 
// Note that a path may exist without the current user having
// permission to read it.
fun path_exists(_): Bool {
    __BUILTIN_IMPLEMENTATION;
}

// Write a string to stdout.
//
// ```
// print("hello world\n");
// ```
fun print(_: String): Unit {
    __BUILTIN_IMPLEMENTATION;
}

// Write a string to stdout, with a newline appended.
//
// ```
// println("hello world");
// ```
fun println(_: String): Unit {
    __BUILTIN_IMPLEMENTATION;
}

// Execute the given string as a shell command, and return stdout
// concatenated with stderr.
//
// ```
// shell("ls", ["-l", "/"]);
// ```
fun shell(_, _): String {
    __BUILTIN_IMPLEMENTATION;
}

// Pretty print a value.
//
// ```
// string_repr(123); // "123"
// ```
fun string_repr(_): String {
    __BUILTIN_IMPLEMENTATION;
}

// Read the contents of `path` as a string.

// ```
// read_file("/tmp/foo.txt");
// ```
fun read_file(path: String): STring {
    __BUILTIN_IMPLEMENTATION;
}

// Return the path of the current working directory.

// ```
// working_directory(); // "/home/yourname/awesome_garden_project"
// ```
fun working_directory(): String {
    __BUILTIN_IMPLEMENTATION;
}

// Return a new list with the value added to the end.
//
// ```
// [10].append(11); // [10, 11]
// ```
fun<T> (self: List<T>) append(value: T): List<T> {
    __BUILTIN_IMPLEMENTATION;
}

// Get the item in the list at the index specified.
// Errors if the index is less than 0 or greater than length - 1.
//
// ```
// [4, 5, 6].get(1); // 5
// ```
fun<T> (self: List<T>) get(index: Int): T {
    __BUILTIN_IMPLEMENTATION;
}

// Return the length of the list.
//
// ```
// [10, 11, 12].len(); // 3
// ```
fun<T> (self: List<T>) len(): Int {
    __BUILTIN_IMPLEMENTATION;
}

// Return a new string with the string argument concatenated.
//
// ```
// "foo".concat("bar"); // "foobar"
// ```
fun (self: String) concat(value: String): String {
    __BUILTIN_IMPLEMENTATION;
}

// Return the number of characters (codepoints) in the string.
//
// ```
// "abc".len(); // 3
// ```
fun (self: String) len(): Int {
    __BUILTIN_IMPLEMENTATION;
}

// Return the substring of the string between the indexes specified.
//
// ```
// "abcdef".substring(1, 3); // "bc"
// ```
fun (self: String) substring(from_index: Int, to_index: Int): String {
    __BUILTIN_IMPLEMENTATION;
}
