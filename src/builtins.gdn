// A Unicode string, such as "hello world".
struct String {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// A 64-bit integer, such as 1234.
struct Int {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// A sequence of values of type T, such as [1, 2, 3].
struct List<T> {
  __BUILTIN_IMPLEMENTATION: NoValue,
}

// Stop the program immediately, and report the error message given.
//
// ```
// error("Computer is melting!")
// ```
export fun error(message: String): NoValue {
  __BUILTIN_IMPLEMENTATION
}

// Stop the program if `condition` is `False`.
//
// ```
// assert((1 + 1) == 2)
// ```
//
// This is intended for writing tests. See `error` for reporting other
// issues.
export fun assert(condition: Bool): Unit {
  __BUILTIN_IMPLEMENTATION
}

// List the contents of the specified directory.
//
// ```
// list_directory("/")
// ```
export fun list_directory(path: String): Result<List<Path>, String> {
  __BUILTIN_IMPLEMENTATION
}

// Return True if this path exists.
//
// ```
// path_exists("/") // True
// path_exists("/no_such_dir") // False
// ```
//
// Note that a path may exist without the current user having
// permission to read it.
export fun path_exists(path: String): Bool {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout.
//
// ```
// print("hello world\n")
// ```
export fun print(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Write a string to stdout, with a newline appended.
//
// ```
// println("hello world")
// ```
export fun println(_: String): Unit {
  __BUILTIN_IMPLEMENTATION
}

// Execute the given string as a shell command, and return stdout
// concatenated with stderr.
//
// ```
// shell("ls", ["-l", "/"])
// ```
export fun shell(command: String, args: List<String>): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

// Pretty print a value.
//
// ```
// string_repr(123) // "123"
// ```
export fun string_repr<T>(value: T): String {
  __BUILTIN_IMPLEMENTATION
}

// Read the contents of `path` as a string.
//
// ```
// read_file("/tmp/foo.txt")
// ```
export fun read_file(path: String): Result<String, String> {
  __BUILTIN_IMPLEMENTATION
}

// Write `content` to file `path`.
//
// If `path` already exists, its content is replaced with `content`.
//
// ```
// write_file("hello world", "/tmp/foo.txt")
// ```
export fun write_file(content: String, path: String): Result<Unit, String> {
  __BUILTIN_IMPLEMENTATION
}

// Return the path of the current working directory.
//
// ```
// working_directory() // "/home/yourname/awesome_garden_project"
// ```
export fun working_directory(): String {
  __BUILTIN_IMPLEMENTATION
}

// Return the path of the directory that contains the current source
// file. Returns None when run directly in a CLI or JSON session.
//
// ```
// source_directory() // "/home/yourname/awesome_garden_project"
// ```
export fun source_directory(): Option<String> {
  __BUILTIN_IMPLEMENTATION
}

// Return a new list with the value added to the end.
//
// ```
// [10].append(11) // [10, 11]
// ```
export fun (this: List<T>) append<T>(value: T): List<T> {
  __BUILTIN_IMPLEMENTATION
}

// Get the item in the list at the index specified.
// Errors if the index is less than 0 or greater than `length - 1`.
//
// ```
// [4, 5, 6].get(1) // 5
// ```
export fun (this: List<T>) get<T>(index: Int): T {
  __BUILTIN_IMPLEMENTATION
}

// Return the length of the list.
//
// ```
// [10, 11, 12].len() // 3
// ```
export fun (this: List<T>) len<T>(): Int {
  __BUILTIN_IMPLEMENTATION
}

// Return a new string with the string argument concatenated.
//
// ```
// "foo".concat("bar") // "foobar"
// ```
export fun (this: String) concat(value: String): String {
  __BUILTIN_IMPLEMENTATION
}

// Return the number of characters (codepoints) in the string.
//
// ```
// "abc".len() // 3
// ```
export fun (this: String) len(): Int {
  __BUILTIN_IMPLEMENTATION
}

// Return the substring of the string between the indexes specified.
//
// ```
// "abcdef".substring(1, 3) // "bc"
// "abc".substring(1, 99) // "bc"
// ```
export fun (this: String) substring(from_index: Int, to_index: Int): String {
  __BUILTIN_IMPLEMENTATION
}

// Return a new string with this suffix appended.
//
// ```
// "ab".append("cd") // "abcd"
// ```
export fun (this: String) append(suffix: String): String {
  __BUILTIN_IMPLEMENTATION
}
