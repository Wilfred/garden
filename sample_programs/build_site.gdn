import "./markdown.gdn"

// A list of all the files in `website_dir` that are templates.
//
// Returns absolute paths.
fun template_files(website_dir: Path): List<Path> {
  // TODO: a ? syntax.
  let dir_files = list_directory(website_dir).or_error()
  dir_files.filter(fun(p: Path) { p.p.ends_with(".tmpl.html") })
}

fun markdown_files(website_dir: Path): List<Path> {
  let dir_files = list_directory(website_dir).or_error()
  dir_files.filter(fun(p: Path) { p.extension() == Some("md") })
}

// Convert "foo.tmpl.html" to "foo.html".
fun output_path(template_path: String): String {
  template_path.strip_suffix(".tmpl.html").append(".html")
}

fun build_site(): Unit {
  let website_dir = source_dir_path().parent().parent().join("website")
  let tmpl_paths = template_files(website_dir)

  let base_tmpl_path = website_dir.join("template.html")

  for tmpl_path in tmpl_paths {
    let dest_path = output_path(tmpl_path.p)
    write_website_file(base_tmpl_path, tmpl_path, dest_path)
  }

  for md_path in markdown_files(website_dir) {
    let dest_path = md_path.p.strip_suffix(".md").append(".html")
    let page_src_md = md_path.read().or_error()
    let page_src = render_markdown(page_src_md)
    write_website_page(base_tmpl_path, page_src, dest_path)
  }
}

fun write_website_file(base_tmpl_path: Path, page_path: Path, dest_path: String): Unit {
  let page_src = page_path.read().or_error()
  write_website_page(base_tmpl_path, page_src, dest_path)
}

fun write_website_page(base_tmpl_path: Path, page_src: String, dest_path: String): Unit {
  let base_tmpl_src = base_tmpl_path.read().or_error()
  let (header, footer) = match base_tmpl_src.split_once("MAIN_CONTENT") {
    Some(s) => s,
    None => ("", "")
  }

  let src = "".join([header.trim_right(), page_src, footer.trim_left()])
  write_file(src, dest_path).or_error()
}

{
  build_site()
}

export fun main(_: List<String>) {
  build_site()
}

fun source_dir_path(): Path {
  source_directory().or_exception()
}
