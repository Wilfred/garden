// We don't really care how this parses, but it shouldn't crash the parser.
ffun foo(_: Bool) {
}

// args: dump-ast
// expected stdout:
// Variable(
//     Symbol"ffun",
// )
// Call(
//     Expression {
//         position: Position { ... },
//         expr_: Variable(
//             Symbol"foo",
//         ),
//         value_is_used: true,
//         id: SyntaxId(3),
//     },
//     ParenthesizedArguments {
//         open_paren: Position { ... },
//         arguments: [
//             ExpressionWithComma {
//                 expr: Expression {
//                     position: Position { ... },
//                     expr_: Variable(
//                         Symbol"_",
//                     ),
//                     value_is_used: true,
//                     id: SyntaxId(5),
//                 },
//                 comma: None,
//             },
//         ],
//         close_paren: Position { ... },
//     },
// )
// Invalid

// expected stderr:
// Error: Parse error: Expected `,` or `)` after this.
// ---| src/test_files/parser/malformed_fun_keyword.gdn:2:10
//   1| // We don't really care how this parses, but it shouldn't crash the parser.
//   2| ffun foo(_: Bool) {
//   3| }        ^
// Error: Parse error: Expected an expression after this.
// ---| src/test_files/parser/malformed_fun_keyword.gdn:2:10
//   1| // We don't really care how this parses, but it shouldn't crash the parser.
//   2| ffun foo(_: Bool) {
//   3| }        ^
// Error: Parse error: Expected an expression after this.
// ---| src/test_files/parser/malformed_fun_keyword.gdn:2:10
//   1| // We don't really care how this parses, but it shouldn't crash the parser.
//   2| ffun foo(_: Bool) {
//   3| }        ^

