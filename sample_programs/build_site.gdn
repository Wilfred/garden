fun render_markdown_header(src: String): String {
  let h_count = 0

  while src.starts_with("#") {
    h_count += 1
    src = src.strip_prefix("#")
  }

  let open_tag = "".join(["<h", string_repr(h_count), ">"])
  let close_tag = "".join(["</h", string_repr(h_count), ">"])

  "".join([open_tag, render_inline(src.strip_prefix(" ")), close_tag])
}

fun render_inline(src: String): String {
  let parts: List<String> = []

  while True {
    match split_inline_punct(src) {
      Some(src_parts) => {
        let (before, after) = src_parts
        parts = parts.append(before)

        if after.starts_with("`") {
          let (rendered, new_src) = render_backtick(after)
          parts = parts.append(rendered)
          src = new_src
        } else if after.starts_with("[") {
          let (rendered, new_src) = render_link(after)
          parts = parts.append(rendered)
          src = new_src
        } else {
          assert(False)
        }
      }
      None => {
        parts = parts.append(src)
        break
      }
    }
  }

  "".join(parts)
}

// If `src` contains punctuation, return the text before the
// punctuation and the substring including the punctuation to the end.
fun split_inline_punct(src: String): Option<(String, String)> {
  let i = 0
  while (i + 1) < src.len() {
    let char = src.substring(i, i + 1)
    if (char == "`") || (char == "[") {
      return Some((src.substring(0, i), src.substring(i, src.len())))
    }

    i += 1
  }

  None
}

// Render the next backtick text as code, and return the remainder of
// the text to process.
fun render_backtick(src: String): (String, String) {
  assert(src.starts_with("`"))
  src = src.substring(1, src.len())

  match src.split_once("`") {
    Some(parts) => {
      let (before, after) = parts
      ("".join(["<code>", before, "</code>"]), after)
    }
    None => {
      ("", src)
    }
  }
}

fun render_link(src: String): (String, String) {
  assert(src.starts_with("["))
  src = src.substring(1, src.len())

  src.split_once("](")
  match src.split_once("](") {
    Some(parts) => {
      let (url_text, after_paren) = parts
      match after_paren.split_once(")") {
        Some(parts) => {
          let (url, after) = parts
          ("".join(["<a href=\"", url, "\">", url_text, "</a>"]), after)
        }
        None => (src, "")
      }
    }
    None => {
      ("", src)
    }
  }
}

fun render_markdown_paragraph(src: String): String {
  "".join(["<p>", render_inline(src), "</p>"])
}

fun render_markdown(src: String): String {
  let lines = src.lines()
  let parts: List<String> = lines.map(fun(line: String) {
    if line.starts_with("#") {
      render_markdown_header(line)
    } else if line != "" {
      render_markdown_paragraph(line)
    } else {
      line
    }
  })

  "\n".join(parts)
}

test render_h1 {
  assert(render_markdown("# foo") == "<h1>foo</h1>")
}

test render_h2 {
  assert(render_markdown("## foo") == "<h2>foo</h2>")
}

test render_markdown_paragraph {
  assert(render_markdown("foo bar") == "<p>foo bar</p>")
}

test render_backtick {
  assert(render_markdown("`foo`") == "<p><code>foo</code></p>")
}

test render_backtick_in_heading {
  assert(render_markdown("# `foo`") == "<h1><code>foo</code></h1>")
}

test render_link {
  assert(render_markdown("[foo](example.com)") == "<p><a href=\"example.com\">foo</a></p>")
}

fun file_name(path: String): String {
  let parts = path.split("/")
  parts.last().or_exception()
}

// A list of all the files in `website_dir` that are templates.
//
// Returns absolute paths.
fun template_files(website_dir: String): List<String> {
  // TODO: a ? syntax.
  let dir_files = list_directory(website_dir).or_error()
  dir_files.map(fun(p: Path) {p.p}).filter(fun(s: String) {s.ends_with(".tmpl.html") })
}

// Convert "foo.tmpl.html" to "foo.html".
fun output_path(template_path: String): String {
  template_path.strip_suffix(".tmpl.html").append(".html")
}

fun build_site(): Unit {
  let website_dir = source_dir_path().parent().parent().join("website").p

  let base_tmpl_path = "/".join([website_dir, "template.html"])
  let tmpl_paths = template_files(website_dir)

  for tmpl_path in tmpl_paths {
    let dest_path = output_path(tmpl_path)
    write_website_file(base_tmpl_path, tmpl_path, dest_path)
  }
}

fun write_website_file(base_tmpl_path: String, page_path: String, dest_path: String): Unit {
  let base_tmpl_src = read_file(base_tmpl_path).or_error()
  let (header, footer) = match base_tmpl_src.split_once("MAIN_CONTENT") {
    Some(s) => s,
    None => ("", "")
  }

  let content_src = read_file(page_path).or_error()
  let src = "".join([header.trim_right(), content_src, footer.trim_left()])

  write_file(src, dest_path).or_error()
}

{
  build_site()
}

export fun main(_: List<String>) {
  build_site()
}

fun source_dir_path(): Path {
  Path{ p: source_directory().or_exception() }
}

