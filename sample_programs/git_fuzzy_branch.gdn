#!/usr/bin/env -S garden run

fun lines(s: String): List {
  let parts = [];

  let line_start = 0;
  let i = 0;
  while (i < s.len()) {
    let char = string_substring(s, i, i + 1);

    if (char == "\n") {
      parts = list_append(parts, string_substring(s, line_start, i));
      line_start = i + 1;
    }

    i = i + 1;
  }

  // Append last line if it wasn't terminated with a newline.
  if (line_start != s.len()) {
    parts = list_append(parts, string_substring(s, line_start, s.len()));
  }

  parts;
}

fun (self: List) filter(f): List {
  let result = [];

  let i = 0;
  while (i < list_length(self)) {
    let item = list_get(self, i);

    if (f(item)) {
      result = list_append(result, item);
    }

    // todo: handle parse errors better if this semicolon is missing.
    i = i + 1;
  }
  result;
}

fun (self: String) contains(needle: String): Bool {
  if (needle.len() > self.len()) {
    return false;
  }

  // TODO: better parse error if this last parenthesis is missing.
  // dbg(string_length(haystack) - string_length(needle));

  let i = 0;
  while (i <= (self.len() - needle.len())) {
    let section = string_substring(self, i, i + needle.len());
    if (section == needle) {
      return true;
    }

    i = i + 1;
  }

  false;
}

fun (self: List) is_empty(): Bool {
  list_length(self) == 0;
}

fun (self: List) contains(item): Bool {
  let i = 0;
  while (i < list_length(self)) {
    if (list_get(self, i) == item) {
      return true;
    }

    i = i + 1;
  }

  false;
}

fun (self: String) join(items: List): String {
  if (items.is_empty()) {
    return "";
  }
  if (list_length(items) == 1) {
    return list_get(items, 0);
  }

  let res = list_get(items, 0);
  let i = 1;
  while (i < list_length(items)) {
    res = string_concat(res, self);
    res = string_concat(res, list_get(items, i));
    i = i + 1;
  }
  res;
}

fun in_git_repo(): Bool {
  let git_dir_path = string_concat(working_directory(), "/.git");
  path_exists(git_dir_path);
}

fun check_out(branch_name: String): Void {
  print(shell("git", ["checkout", branch_name]));
}

fun main(args: List): Void {
  if (list_length(args) != 1) {
    println("Usage: git_fuzzy_branch <name substring>");
    // TODO: support void values.
    return false;
  }
  let needle = list_get(args, 0);

  if (in_git_repo()) {
    // TODO: One branch matches exactly?
    let all_branches = lines(shell("git", ["for-each-ref", "--format=%(refname:short)", "refs/heads/"]));

    if (all_branches.contains(needle)) {
      // If there's a branch with this name exactly, use it.
      check_out(needle);
      return 0; // TODO: void value.
    }

    let branches = all_branches.filter(fun(name) { name.contains(needle); });
    if (branches.is_empty()) {
      println(string_concat("No branches found maching: ", needle));
    } else if (list_length(branches) == 1) {
      let branch_name = list_get(branches, 0);
      check_out(branch_name);
    } else {
      let formatted_branches = ", ".join(branches);
      let msg = "".join(["Found ", int_to_string(list_length(branches)), " branches: ", formatted_branches]);
      print(msg);
    }
  } else {
    println("Not in a git repository.");
  }
}
