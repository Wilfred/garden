// Write `content` to file `path`.
//
// If `path` already exists, its content is replaced with `content`.
//
// ```
// import "__fs.gdn" as fs
// fs::write_file("hello world", Path{ p: "/tmp/foo.txt" })
// ```
external fun write_file(content: String, path: Path): Result<Unit, String> {
  __BUILTIN_IMPLEMENTATION
}

test write_file {
  // TODO: delete the file afterwards
  write_file("hello world", Path{ p: "/tmp/file_from_garden_testing.txt" })
}

// List the contents of the specified directory.
//
// ```
// import "__fs.gdn" as fs
// fs::list_directory(Path{ p: "/" })
// ```
external fun list_directory(path: Path): Result<List<Path>, String> {
  __BUILTIN_IMPLEMENTATION
}

// Kludge to perform a runtime check that list_directory returns a
// list of paths.
fun takes_list_of_paths(_: List<Path>) {}

test list_directory {
  match list_directory(Path{p: "/"}) {
    Ok(paths) => {
      takes_list_of_paths(paths)
    }
    Err(_) => {}
  }
}

// Return the path of the current working directory.
//
// ```
// import "__fs.gdn" as fs
// fs::working_directory() //-> Path{ p: "/home/yourname/awesome_garden_project" }
// ```
external fun working_directory(): Path {
  __BUILTIN_IMPLEMENTATION
}

// Change the current working directory to `path`.
//
// This affects `working_directory()` as well as imports used in
// `check_snippet` arguments.
//
// ```
// import "__fs.gdn" as fs
// fs::set_working_directory(Path{ p: "/tmp" })
// ```
external fun set_working_directory(path: Path): Result<Unit, String> {
  __BUILTIN_IMPLEMENTATION
}
