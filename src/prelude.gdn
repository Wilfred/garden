// Basic types.

// The boolean type. This type represents when something is true or
// false, such as predicates.
enum Bool {
    True,
    False,
}

// The unit type. Use this when your function doesn't have any useful
// value to return, such as side-effecting functions.
enum Unit {
    Unit
}

// The option type. Use this when you might have a value, but might
// not.
enum Option<T> {
    Some(T),
    None,
}

// `Result` represents a value that succeeded, with `Ok(...)`, or
// failed, with `Err(...)`.
enum Result<T, E> {
    Ok(T),
    Err(E),
}

// If this value is `Ok`, unwrap it, otherwise error.
fun<T, E> (self: Result<T, E>) unwrap(): T {
    match (self) {
        Ok(v) => v,
        Err(e) => error("Called .unwrap() on an Err.")
    }
}

test unwrap {
    should_equal(Ok("foo").unwrap(), "foo");
}


// Write an arbitrary value to stdout, along with debugging metadata.
//
// ```
// dbg([1, 2]);
// ```
fun dbg(value): Unit {
    println(string_repr(value));
}
// TODO: write with generics, like this:
//
// fun<T> dbg(value: T): Unit {
//     println(string_repr(value));
// }

// Unwrap a value that is `Ok`, or terminate with an error.
//
// TODO: support generic types in return position.
fun<T> (self: Result<T, E>) or_error() {
    match (self) {
        Ok(v) => v
        Err(e) => error(string_repr(e))
    }
}

enum NoValue {}

// String methods.

// Split this string into a list of lines.
fun (self: String) lines(): List<String> {
    let parts = [];

    let line_start = 0;
    let i = 0;
    while (i < self.len()) {
        let char = self.substring(i, i + 1);

        if (char == "\n") {
            parts = parts.append(self.substring(line_start, i));
            line_start = i + 1;
        }

        i = i + 1;
    }

    // Append last line if it wasn't terminated with a newline.
    if (line_start != self.len()) {
        parts = parts.append(self.substring(line_start, self.len()));
    }

    parts;
}

test lines {
    should_equal("".lines(), []);
    should_equal("a".lines(), ["a"]);
    should_equal("a\nb".lines(), ["a", "b"]);
    should_equal("a\nb\n".lines(), ["a", "b"]);
}

// Split this string on the first occurrence of `needle`, and return
// the text before and after `needle`.
//
// ```
// "abcd".split_once("b"); // Some(["a", "cd"])
// ```
fun (self: String) split_once(needle: String): Option<List<String>> {
    let i = 0;
    while ((i + needle.len()) <= self.len()) {
        let substring = self.substring(i, i + needle.len());
        if (substring == needle) {
            return Some([
                self.substring(0, i),
                self.substring(i + needle.len(), self.len()),
            ]);
        }

        i = i + 1;
    }

    return None;
}

test split_once {
    // Needle not present.
    should_equal("abc".split_once("x"), None);

    // Needle present once.
    should_equal("abc".split_once("b"), Some(["a", "c"]));

    // Needle present at end
    should_equal("abc".split_once("c"), Some(["ab", ""]));

    // Needle present multiple times.
    should_equal("abcbe".split_once("b"), Some(["a", "cbe"]));
}

fun (self: String) index_of(needle: String): Option<Int> {
    let i = 0;
    while ((i + needle.len()) <= self.len()) {
        let substring = self.substring(i, i + needle.len());

        // TODO: better error on ! here
        if (substring == needle) {
            return Some(i);
        }

        i = i + 1;
    }

    None;
}

test string_index_of {
    should_equal("abc".index_of("x"), None);

    should_equal("abc".index_of("a"), Some(0));
    should_equal("abca".index_of("a"), Some(0));

    should_equal("abc".index_of("c"), Some(2));
}

// Join `items` (a list of strings) with this string as a separator.
fun (self: String) join(items: List<String>): String {
    if (items.is_empty()) {
        return "";
    }
    if (items.len() == 1) {
        return items.get(0);
    }

    let res = items.get(0);
    let i = 1;
    while (i < items.len()) {
        res = res.concat(self);
        res = res.concat(items.get(i));
        i = i + 1;
    }
    res;
}

test join {
    should_equal(" ".join(["x"]), "x");

    // TODO: should .join() exist on String or on List?
    should_equal(" ".join(["x", "y"]), "x y");
}

// Does this string contain `substring`?
fun (self: String) contains(substring: String): Bool {
    if (substring.len() > self.len()) {
        return False;
    }

    // TODO: better parse error if this last parenthesis is missing.
    // dbg(string_length(haystack) - string_length(substring));

    let i = 0;
    while (i <= (self.len() - substring.len())) {
        let section = self.substring(i, i + substring.len());
        if (section == substring) {
            return True;
        }

        i = i + 1;
    }

    False;
}

// List methods.

// Get the first item in this list, if the list is non-empty.
fun<T> (self: List<T>) first(): Option<T> {
    if (self.is_empty()) {
        None;
    } else {
        Some(self.get(0));
    }
}

test first {
    should_equal([].first(), None);
    should_equal([123].first(), Some(123));
}

// Return a copy of this list with the items where `f(item)` returns
// True.
fun<T> (self: List<T>) filter(f): List<T> {
    let result = [];

    let i = 0;
    while (i < self.len()) {
        let item = self.get(i);

        if (f(item)) {
            result = result.append(item);
        }

        i = i + 1;
    }
    result;
}

test filter {
    should_equal([1, 2].filter(fun(_) { True; }), [1, 2]);

    // TODO: better error printing here.
    // [1, 2].filter(fun() { True; });
}

// Is this list empty?
fun<T> (self: List<T>) is_empty(): Bool {
    self.len() == 0;
}

// Does this list contain `item`?
fun<T> (self: List<T>) contains(item): Bool {
    let i = 0;
    while (i < self.len()) {
        if (self.get(i) == item) {
            return True;
        }

        i = i + 1;
    }

    False;
}

test contains {
    should_equal([10, 11].contains(10), True);
}

// Testing heleprs.

// Assert that `actual`and `expected` are equal values.
fun should_equal(actual, expected): Unit {
    if (actual != expected) {
        error("".join(["Expected ", string_repr(expected), " but got ", string_repr(actual), "."]));
    }
}
