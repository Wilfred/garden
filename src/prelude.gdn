// Basic types.

// The boolean type. This type represents when something is true or
// false, such as predicates.
enum Bool {
    True,
    False,
}

// The unit type. Use this when your function doesn't have any useful
// value to return, such as side-effecting functions.
enum Unit {
    Unit
}

// The option type. Use this when you might have a value, but might
// not.
enum Option<T> {
    Some(T),
    None,
}

// `Result` represents a value that succeeded, with `Ok(...)`, or
// failed, with `Err(...)`.
enum Result<T, E> {
    Ok(T),
    Err(E),
}

// Write an arbitrary value to stdout, along with debugging metadata.
//
// Returns the input, so you can use `dbg` in larger expressions
// `foo(dbg(bar()))`.
//
// ```
// dbg([1, 2]);
// ```
fun<T> dbg(value: T): T {
    println(string_repr(value));
    value;
}

// Raise an error.
//
// You can use this function for code that you haven't implemented
// yet.
fun todo(): NoValue {
    error("Not yet implemented");
}

// If this value is `Ok`, unwrap it, otherwise error.
fun<T, E> (self: Result<T, E>) or_error(): T {
    match (self) {
        Ok(v) => v
        Err(e) => error(" ".join(["Called .unwrap() on an Err.", string_repr(e)]))
    }
}

test or_error {
    should_equal(Ok("foo").or_error(), "foo");
}

enum NoValue {}

// String methods.

// Does this string start with `s`?
fun (self: String) starts_with(s: String): Bool {
    if (s.len() > self.len()) {
        return False;
    }

    self.substring(0, s.len()) == s;
}

test starts_with {
    should_equal("abc".starts_with("ab"), True);
    should_equal("abc".starts_with(""), True);

    should_equal("abc".starts_with("x"), False);
    should_equal("abc".starts_with("b"), False);
    should_equal("abc".starts_with("abcaa"), False);
}

// Does this string end with `s`?
fun (self: String) ends_with(s: String): Bool {
    if (s.len() > self.len()) {
        return False;
    }

    self.substring(self.len() - s.len(), self.len()) == s;
}

test ends_with {
    should_equal("abc".ends_with("bc"), True);
    should_equal("abc".ends_with(""), True);

    should_equal("abc".ends_with("x"), False);
    should_equal("abc".ends_with("b"), False);
    should_equal("abc".ends_with("aabc"), False);
}


// Split this string into a list of lines.
fun (self: String) lines(): List<String> {
    let parts = [];

    let line_start = 0;
    let i = 0;
    while (i < self.len()) {
        let char = self.substring(i, i + 1);

        if (char == "\n") {
            parts = parts.append(self.substring(line_start, i));
            line_start = i + 1;
        }

        i = i + 1;
    }

    // Append last line if it wasn't terminated with a newline.
    if (line_start != self.len()) {
        parts = parts.append(self.substring(line_start, self.len()));
    }

    parts;
}

test lines {
    should_equal("".lines(), []);
    should_equal("a".lines(), ["a"]);
    should_equal("a\nb".lines(), ["a", "b"]);
    should_equal("a\nb\n".lines(), ["a", "b"]);
}

// Split this string on the first occurrence of `needle`, and return
// the text before and after `needle`.
//
// ```
// "abcd".split_once("b"); // Some(["a", "cd"])
// ```
fun (self: String) split_once(needle: String): Option<List<String>> {
    let i = 0;
    while ((i + needle.len()) <= self.len()) {
        let substring = self.substring(i, i + needle.len());
        if (substring == needle) {
            return Some([
                self.substring(0, i),
                self.substring(i + needle.len(), self.len()),
            ]);
        }

        i = i + 1;
    }

    return None;
}

test split_once {
    // Needle not present.
    should_equal("abc".split_once("x"), None);

    // Needle present once.
    should_equal("abc".split_once("b"), Some(["a", "c"]));

    // Needle present at end
    should_equal("abc".split_once("c"), Some(["ab", ""]));

    // Needle present multiple times.
    should_equal("abcbe".split_once("b"), Some(["a", "cbe"]));
}

// Find the first index of `needle` in `self`.
//
// ```
// "abc".index_of("c"); // 2
// ```
fun (self: String) index_of(needle: String): Option<Int> {
    let i = 0;
    while ((i + needle.len()) <= self.len()) {
        let substring = self.substring(i, i + needle.len());

        // TODO: better error on ! here
        if (substring == needle) {
            return Some(i);
        }

        i = i + 1;
    }

    None;
}

test string_index_of {
    should_equal("abc".index_of("x"), None);

    should_equal("abc".index_of("a"), Some(0));
    should_equal("abca".index_of("a"), Some(0));

    should_equal("abc".index_of("c"), Some(2));
}

// Join `items` (a list of strings) with this string as a separator.
fun (self: String) join(items: List<String>): String {
    if (items.is_empty()) {
        return "";
    }
    if (items.len() == 1) {
        return items.get(0);
    }

    let res = items.get(0);
    let i = 1;
    while (i < items.len()) {
        res = res.concat(self);
        res = res.concat(items.get(i));
        i = i + 1;
    }
    res;
}

test join {
    should_equal(" ".join(["x"]), "x");

    // TODO: should .join() exist on String or on List?
    should_equal(" ".join(["x", "y"]), "x y");
}

// Does this string contain `substring`?
fun (self: String) contains(substring: String): Bool {
    if (substring.len() > self.len()) {
        return False;
    }

    // TODO: better parse error if this last parenthesis is missing.
    // dbg(string_length(haystack) - string_length(substring));

    let i = 0;
    while (i <= (self.len() - substring.len())) {
        let section = self.substring(i, i + substring.len());
        if (section == substring) {
            return True;
        }

        i = i + 1;
    }

    False;
}

fun (self: String) trim_left(): String {
    let i = 0;
    while (i < self.len()) {
        let char = self.substring(i, i + 1);
        if (char != " ") {
            break;
        }

        i = i + 1;
    }

    self.substring(i, self.len());
}

test trim_left {
    should_equal("a".trim_left(), "a");
    should_equal("a b".trim_left(), "a b");
    should_equal("  a".trim_left(), "a");
    should_equal("a ".trim_left(), "a ");
}

fun (self: String) trim_right(): String {
    let i = self.len() - 1;
    while (i >= 0) {
        let char = self.substring(i, i + 1);
        if (char != " ") {
            break;
        }

        i = i - 1;
    }

    self.substring(0, i + 1);
}

test trim_right {
    should_equal("a".trim_right(), "a");
    should_equal("a b".trim_right(), "a b");
    should_equal(" a".trim_right(), " a");
    should_equal("a  ".trim_right(), "a");
}

// Returns this string without the suffix specified. If this string
// does not end with the suffix, return the string unchanged.
fun (self: String) strip_suffix(suffix: String): String {
    if (self.ends_with(suffix)) {
        return self.substring(0, self.len() - suffix.len());
    }

    self;
}

test strip_suffix {
    should_equal("abcdef".strip_suffix("ef"), "abcd");
    should_equal("abcdef".strip_suffix("xyz"), "abcdef");
}

// Returns this string without the prefix specified. If this string
// does not start with the prefix, return the string unchanged.
fun (self: String) strip_prefix(prefix: String): String {
    if (self.starts_with(prefix)) {
        // return self.substring(prefix.len(), self.len(), 1);
        return self.substring(prefix.len(), self.len());
    }

    self;
}

test strip_prefix {
    should_equal("abcdef".strip_prefix("ab"), "cdef");
    should_equal("abcdef".strip_prefix("xyz"), "abcdef");
}

// Split this string on occurrences of `needle`.
//
// ```
// "a,b".split(","); // ["a", "b"]
// "ab".split(","); // ["ab"]
// "a,,b,".split(","); // ["a", "", "b", ""]
// ```
fun (self: String) split(needle: String): List<String> {
    let s = self;

    let parts: List<String> = [];
    while (s != "") {
        match (s.index_of(needle)) {
            Some(i) => {
                parts = parts.append(s.substring(0, i));
                s = s.substring(i + needle.len(), s.len());
            }
            None => {
                parts = parts.append(s);
                break;
            }
        }

    }
    

    parts;
}

test split {
    should_equal("ab".split(","), ["ab"]);
    should_equal("a,b".split(","), ["a", "b"]);
    should_equal("a,,b".split(","), ["a", "", "b"]);
}

// List methods.

// Get the first item in this list, if the list is not empty.
fun<T> (self: List<T>) first(): Option<T> {
    if (self.is_empty()) {
        None;
    } else {
        Some(self.get(0));
    }
}

test first {
    should_equal([].first(), None);
    should_equal([123].first(), Some(123));
}

// Get the last item in this list, if the list is not empty.
fun<T> (self: List<T>) last(): Option<T> {
    if (self.is_empty()) {
        None;
    } else {
        Some(self.get(self.len() - 1));
    }
}

test last {
    should_equal([].last(), None);
    should_equal([123].last(), Some(123));
}

// Return a copy of this list with the items where `f(item)` returns
// True.
fun<T> (self: List<T>) filter(f): List<T> {
    let result = [];

    let i = 0;
    while (i < self.len()) {
        let item = self.get(i);

        if (f(item)) {
            result = result.append(item);
        }

        i = i + 1;
    }
    result;
}

test filter {
    should_equal([1, 2].filter(fun(_) { True; }), [1, 2]);

    // TODO: better error printing here.
    // [1, 2].filter(fun() { True; });
}

// Is this list empty?
fun<T> (self: List<T>) is_empty(): Bool {
    self.len() == 0;
}

// Does this list contain `item`?
fun<T> (self: List<T>) contains(item): Bool {
    let i = 0;
    while (i < self.len()) {
        if (self.get(i) == item) {
            return True;
        }

        i = i + 1;
    }

    False;
}

test contains {
    should_equal([10, 11].contains(10), True);
}

// Option methods.

// If this value is `Some(value)`, unwrap it, otherwise throw an exception.
fun<T> (self: Option<T>) or_exception(): T {
    match (self) {
        Some(v) => v,
        None => error("Called or_exception on a `None` value.")
    }
}

test option_or_exception {
    should_equal(Some(123).or_exception(), 123);
}

// Testing heleprs.

// Assert that `actual`and `expected` are equal values.
fun should_equal(actual, expected): Unit {
    if (actual != expected) {
        error("".join(["Expected ", string_repr(expected), " but got ", string_repr(actual), "."]));
    }
}
