external fun bad1(): Int {
  while True {}
  1
}

external fun bad2(): Int {
  return 1
  2
}

external fun bad3(): Int {
  error("")
  2
}

// More sophisticated analysis is possible, but keeping the implementation simple for now.
// external fun bad_ignored(b: Bool): Int {
//   if b {
//     return 1
//   } else {
//     return 2
//   }
//
//   3
// }
//
// external fun bad_ignored2(b: Bool): Int {
//   let num = 1 + error("")
//   num
// }

// We don't want to complain about code after todo(), even though it's
// unreachable. We're already linting for todo() calls, and it's not
// useful to show more squiggles on WIP code.
external fun good(): Int {
  todo()
  let x = 1
  x + 1
}

fun get_bool(): Bool {
  False
}

external fun good2(): Int {
  while get_bool() {}
  1
}

// args: check
// expected exit status: 1
// expected stdout:
// Warning: Unfinished code.
// ---| src/test_files/check/unreachable.gdn:36:3
// 35 | external fun good(): Int {
// 36 |   todo()
//    |   ^^^^^^
// 37 |   let x = 1
// 
// Warning: Unreachable code after `while` loop which never terminates.
// ---| src/test_files/check/unreachable.gdn:3:3
// 2  |   while True {}
// 3  |   1
//    |   ^
// 4  | }
// 
// Warning: Unreachable code after `return`.
// ---| src/test_files/check/unreachable.gdn:8:3
// 7  |   return 1
// 8  |   2
//    |   ^
// 9  | }
// 
// Warning: Unreachable code after `error`.
// ---| src/test_files/check/unreachable.gdn:13:3
// 12 |   error("")
// 13 |   2
//    |   ^
// 14 | }

