import "__fs.gdn" as fs
import "__garden.gdn" as garden
import "__prelude.gdn" as prelude
import "./markdown.gdn"

// A list of all the files in `website_dir` that have a .md extension.
fun markdown_files(website_dir: Path): List<Path> {
  let dir_files = fs::list_directory(website_dir).or_error()
  dir_files.filter(fun(p: Path) { p.extension() == Some("md") })
}

// Given a snippet of source code `src`, remove all the leading lines
// that are just comments.
fun drop_leading_comments(src: String): String {
  let lines = src.lines()

  let first_code_line = 0
  for (i, line) in lines.enumerate() {
    if line.starts_with("//") {
      continue
    }
    if line == "" {
      continue
    }

    first_code_line = i
    break
  }

  "\n".join(lines.slice(first_code_line, lines.len()))
}

fun write_fun_page(ns_name: String, ns: Namespace, fun_name: String, out_dir: Path, base_tmpl_src: String): Unit {
  let qualified_name = "::".join([ns_name, fun_name])

  match garden::doc_comment(ns, fun_name) {
    Some(doc_comment) => {
      let heading = if ns_name == "__prelude.gdn" {
        "".join(["# `", fun_name, "`"])
      } else {
        "".join(["# `", qualified_name, "`"])
      }
      let page_src = render_doc_comment(heading, doc_comment, None)

      let dest_path = out_dir.join("fun:" ^ (qualified_name ^ ".html"))
      write_website_page(base_tmpl_src, page_src, dest_path)
    }
    None => {
      let parts = [
        "Tried to generate a page for ",
        qualified_name,
        " but it doesn't have a doc comment."]
      println("".join(parts))
    }
  }
}

// Render `doc_comment` as HTML.
fun render_doc_comment(heading: String, doc_comment: String, src: Option<String>): String {
  let (intro, rest) = match doc_comment.split_once("\n\n") {
    Some(tup) => tup,
    None => (doc_comment, ""),
  }

  let src = match src {
    Some(src) => {
      "```\n" ^ (drop_leading_comments(src) ^ "\n```")
    }
    None => ""
  }

  let md_src = "".join([heading, "\n\n" , intro, "\n\n", src])
  if rest != "" {
    md_src = md_src ^ ("\n\n" ^ rest)
  }

  render_markdown(md_src)
}

// Look up the doc comment for `type_name`, render it to HTML and
// write it to `out_dir`.
fun write_type_page(type_name: String, out_dir: Path, base_tmpl_src: String): Unit {
  match garden::doc_comment_for_type(type_name) {
    Some(doc_comment) => {
      let heading = "".join(["# `", type_name, "` type"])
      let page_src = render_doc_comment(heading, doc_comment, garden::source_for_type(type_name))

      let dest_path = out_dir.join("type:" ^ (type_name ^ ".html"))
      write_website_page(base_tmpl_src, page_src, dest_path)
    }
    None => {}
  }
}

fun write_markdown_page(base_tmpl_string: String, md_path: Path): Unit {
  let page_src_md = md_path.read().or_error()
  let page_src = render_markdown(substitute_shorthand(page_src_md))
  write_website_page(base_tmpl_string, page_src, md_path.set_extension("html"))
}

fun build_blog(website_dir: Path, base_tmpl_src: String): Unit {
  let blog_post_dir = website_dir.join("blog")

  for md_path in fs::list_directory(blog_post_dir).or_error() {
    write_markdown_page(base_tmpl_src, md_path)
  }
}

// Build the entire garden website.
fun build_site(): Unit {
  let website_dir = source_dir_path().parent().parent().join("website")
  fs::set_working_directory(website_dir).or_error()

  let out_dir = website_dir

  let base_tmpl_path = website_dir.join("template.html")
  let base_tmpl_src = base_tmpl_path.read().or_error()

  build_blog(website_dir, base_tmpl_src)

  let seen_keyword_pages: List<String> = []

  for md_path in markdown_files(website_dir) {
    let file_name = match md_path.file_name() {
      Some(n) => n,
      None => continue,
    }

    match file_name.split_once(":") {
      Some((before, after)) => {
        if before == "keyword" {
          seen_keyword_pages = seen_keyword_pages.append(after.strip_suffix(".md"))
        }
      }
      None => {}
    }

    write_markdown_page(base_tmpl_src, md_path)
  }

  for keyword in garden::keywords() {
    if seen_keyword_pages.contains(keyword).not() {
      println("Expected a page documenting: " ^ keyword)
    }
  }

  for type_name in garden::prelude_types() {
    write_type_page(type_name, out_dir, base_tmpl_src)
  }

  let namespaces = [
    ("__prelude.gdn", prelude),
    ("__fs.gdn", fs),
    ("__garden.gdn", garden),
  ]

  for (ns_name, ns) in namespaces {
    for fun_name in garden::namespace_functions(ns) {
      write_fun_page(ns_name, ns, fun_name, out_dir, base_tmpl_src)
    }
  }
}

// Convert `["a", "b", "c"]` to `"a, b and c"`.
fun join_with_commas_and(items: List<String>): String {
  let last_item = match items.last() {
    Some(item) => item,
    None => return "",
  }

  let but_last = items.slice(0, -1)
  if but_last.is_empty() {
    return last_item
  }

  " and ".join([", ".join(but_last), last_item ^ "."])
}

// Replace all __FOO strings in markdown `src` with runtime values.
fun substitute_shorthand(src: String): String {
  let keyword_links = garden::keywords().map(fun(keyword: String) {
    "".join(["[`", keyword, "`](./keyword:", keyword, ".html)"])
  })

  let keyword_links = join_with_commas_and(keyword_links)

  let type_links = garden::prelude_types().map(fun(name: String) {
    "".join(["[`", name, "`](./type:", name, ".html)"])
  })

  let type_links = join_with_commas_and(type_links)

  let prelude_funs = garden::namespace_functions(prelude).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__prelude.gdn::", name, ".html)"])
  })
  let prelude_funs = join_with_commas_and(prelude_funs)

  let fs_funs = garden::namespace_functions(fs).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__fs.gdn::", name, ".html)"])
  })
  let fs_funs = join_with_commas_and(fs_funs)

  let garden_funs = garden::namespace_functions(garden).map(fun(name: String) {
    "".join(["[`", name, "`](./fun:__garden.gdn::", name, ".html)"])
  })
  let garden_funs = join_with_commas_and(garden_funs)

  src
    .replace("__KEYWORDS", keyword_links)
    .replace("__BUILTIN_TYPES", type_links)
    .replace("__PRELUDE_FUNS", prelude_funs)
    .replace("__FS_FUNS", fs_funs)
    .replace("__GARDEN_FUNS", garden_funs)
}

// Wrap `page_src` in the base template and write to the file `dest_path`.
fun write_website_page(base_tmpl_src: String, page_src: String, dest_path: Path): Unit {
  let (header, footer) = match base_tmpl_src.split_once("MAIN_CONTENT") {
    Some(s) => s,
    None => ("", "")
  }

  let src = "".join([header.trim_right(), page_src, footer.trim_left()])
  fs::write_file(src, dest_path).or_error()
}

{
  build_site()
}

fun source_dir_path(): Path {
  source_directory().or_exception()
}
