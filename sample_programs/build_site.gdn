fun render_markdown_header(src: String): String {
    let h_count = 0

    while src.starts_with("#") {
        h_count = h_count + 1
        src = src.strip_prefix("#")
    }

    let open_tag = "".join(["<h", string_repr(h_count), ">"])
    let close_tag = "".join(["</h", string_repr(h_count), ">"])

    "".join([open_tag, src.strip_prefix(" "), close_tag])
}

fun render_inline(src: String): String {
    let parts = src.split("`")
    let in_code = False
    let rendered = ""

    for part in parts {
        if in_code {
            rendered = "".join([rendered, "<code>", part, "</code>"])
        } else {
            rendered = "".join([rendered, part])
        }

        in_code = in_code.not()
    }

    rendered
}

fun render_markdown_paragraph(src: String): String {
    "".join(["<p>", render_inline(src), "</p>"])
}

fun render_markdown(src: String): String {
    let lines = src.lines()
    let parts: List<String> = lines.map(fun(line: String) {
        if line.starts_with("#") {
            render_markdown_header(line)
        } else if line != "" {
            render_markdown_paragraph(line)
        } else {
            line
        }
    })

    "\n".join(parts)
}

test render_h1 {
    assert(render_markdown("# foo") == "<h1>foo</h1>")
}

test render_h2 {
    assert(render_markdown("## foo") == "<h2>foo</h2>")
}

test render_markdown_paragraph {
    assert(render_markdown("foo bar") == "<p>foo bar</p>")
}

test render_backtick {
    assert(render_markdown("`foo`") == "<p><code>foo</code></p>")
}

{
    render_markdown("# foo\n\nbar.")
}

fun file_name(path: String): String {
    let parts = path.split("/")
    parts.last().or_exception()
}

// A list of all the files in `website_dir` that are templates.
//
// Returns absolute paths.
fun template_files(website_dir: String): List<String> {
    // TODO: a ? syntax.
    let dir_files = list_directory(website_dir).or_error()
    dir_files.filter(fun (p: String) {p.ends_with(".tmpl.html") })
}

// Convert "foo.tmpl.html" to "foo.html".
fun output_path(template_path: String): String {
    template_path.strip_suffix(".tmpl.html").append(".html")
}

{
    template_files("/home/wilfred/projects/garden/website")
}

fun build_site(): Unit {
    let website_dir = "/home/wilfred/projects/garden/website"

    let base_tmpl_path = "/".join([website_dir, "template.html"])
    let tmpl_paths = template_files(website_dir)

    for tmpl_path in tmpl_paths {
        let dest_path = output_path(tmpl_path)
        write_website_file(base_tmpl_path, tmpl_path, dest_path)
    }
}

fun write_website_file(base_tmpl_path: String, page_path: String, dest_path: String): Unit {
    let base_tmpl_src = read_file(base_tmpl_path).or_error()
    let parts = match base_tmpl_src.split_once("MAIN_CONTENT") {
        Some(s) => s,
        None => ["", ""]
    }

    let tmpl = read_file(page_path).or_error()

    let src = "".join([parts.get(0).trim_right(), tmpl, parts.get(1).trim_left()])
    write_file(src, dest_path).or_error()
}

{
    build_site()
}

fun main(_: List<String>) {
    build_site()
}
